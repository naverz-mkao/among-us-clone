fileFormatVersion: 2
guid: d69b9faf34c23844aab3d1cf6743f1ef
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nexports.MultiplayMessageType = void 0;\r\nconst UnityEngine_1
    = require(\"UnityEngine\");\r\nconst ZEPETO_Character_Controller_1 = require(\"ZEPETO.Character.Controller\");\r\nconst
    ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst ZEPETO_World_1 = require(\"ZEPETO.World\");\r\nconst
    Main_1 = require(\"../../Main\");\r\nconst ClientMessageSender_1 = require(\"./ClientMessageSender\");\r\nvar
    MultiplayMessageType;\r\n(function (MultiplayMessageType) {\r\n    // When position
    is synced\r\n    MultiplayMessageType[\"CharacterTransform\"] = \"CharacterTransform\";\r\n   
    // For Animation states\r\n    MultiplayMessageType[\"CharacterState\"] = \"CharacterState\";\r\n   
    //Initialize When the Game Starts\r\n    MultiplayMessageType[\"InitializeGame\"]
    = \"InitializeGame\";\r\n})(MultiplayMessageType = exports.MultiplayMessageType
    || (exports.MultiplayMessageType = {}));\r\nclass ClientScript extends ZEPETO_Script_1.ZepetoScriptBehaviour
    {\r\n    constructor() {\r\n        super(...arguments);\r\n        //Map of
    the players coming from the multiplay server. \r\n        this.multiplayPlayers
    = new Map();\r\n        this.messageSender = new ClientMessageSender_1.default();\r\n       
    this.connectedClients = 0;\r\n    }\r\n    static GetInstance() {\r\n       
    if (!ClientScript.instance) {\r\n            const targetObj = UnityEngine_1.GameObject.Find(\"Client\");\r\n           
    if (targetObj)\r\n                ClientScript.instance = targetObj.GetComponent($typeof(ClientScript));\r\n       
    }\r\n        return ClientScript.instance;\r\n    }\r\n    Awake() {\r\n       
    this.messageSender = new ClientMessageSender_1.default();\r\n        this.messageSender.Init(this);\r\n       
    ClientScript.isInitializing = true;\r\n    }\r\n    Start() {\r\n        //Cache
    the room in the Callback when the server creates a room object. \r\n        this.multiplay.add_RoomCreated((room)
    => {\r\n            this.multiplayRoom = room;\r\n        });\r\n        //Callback
    for when the room is joined. \r\n        this.multiplay.add_RoomJoined((room)
    => {\r\n            //Called each time the room state variables are altered\r\n           
    room.add_OnStateChange(this.OnStateChange.bind(this));\r\n            this.multiplayRoom.AddMessageHandler(MultiplayMessageType.InitializeGame,
    (message) => {\r\n                console.log(`Initialized Game with virus ${message.virusId}`);\r\n               
    Main_1.default.instance.InitializeWithVirus(message.virusId);\r\n           
    });\r\n        });\r\n        UnityEngine_1.GameObject.DontDestroyOnLoad(this.gameObject);\r\n   
    }\r\n    Init() {\r\n    }\r\n    GetPlayer(userId) {\r\n        return this.multiplayRoom.State.players.get_Item(userId);\r\n   
    }\r\n    OnStateChange(state, isFirst) {\r\n        // Called for the first state
    change only\r\n        if (isFirst) {\r\n            // Apply sync logic for
    player if they already exist. \r\n            state.players.ForEach((userId,
    player) => { this.OnPlayerAdd(player, userId); });\r\n            // Register
    Player Add/Remove events \r\n            state.players.add_OnAdd((player, userId)
    => { this.OnPlayerAdd(player, userId); });\r\n            state.players.add_OnRemove((player,
    userId) => { this.OnPlayerRemove(player, userId); });\r\n            this.InitializeCharacter(state);\r\n       
    }\r\n    }\r\n    OnPlayerAdd(player, userId) {\r\n        if (this.multiplayPlayers.has(userId))\r\n           
    return;\r\n        // Cache the player to our map \r\n        this.multiplayPlayers.set(userId,
    player);\r\n        //Create spawn info for our new character. \r\n        const
    spawnInfo = new ZEPETO_Character_Controller_1.SpawnInfo();\r\n        const transformInfo
    = Main_1.default.instance.GetSpawnTransform();\r\n        console.log(transformInfo.gameObject.name);\r\n       
    spawnInfo.position = transformInfo.position;\r\n        spawnInfo.rotation =
    transformInfo.rotation;\r\n        // If the added player id matches the world
    service id, we know this is the local player. \r\n        const isLocal = ZEPETO_World_1.WorldService.userId
    === userId;\r\n        // Main.instance.AddSpawn(userId);\r\n        if (isLocal)
    {\r\n            ClientScript.isInitializing = false;\r\n        }\r\n       
    // Instantiate character with the above settings. \r\n        $extension(\"ZEPETO.Character.Controller.ZepetoPlayersExtension\").CreatePlayerWithUserId(ZEPETO_Character_Controller_1.ZepetoPlayers.instance,
    userId, userId, spawnInfo, isLocal);\r\n    }\r\n    OnPlayerRemove(player, userId)
    {\r\n        if (!this.multiplayPlayers.has(userId))\r\n            return;\r\n       
    ZEPETO_Character_Controller_1.ZepetoPlayers.instance.RemovePlayer(userId);\r\n       
    Main_1.default.instance.RemoveSpawn(userId);\r\n    }\r\n    InitializeCharacter(state)
    {\r\n        // Callback when the localplayer is fully loaded into the scene.\r\n       
    ZEPETO_Character_Controller_1.ZepetoPlayers.instance.OnAddedLocalPlayer.AddListener(()
    => {\r\n            // cache the player and userIds\r\n            const zepetoPlayer
    = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.LocalPlayer.zepetoPlayer;\r\n           
    const userId = ZEPETO_World_1.WorldService.userId;\r\n            zepetoPlayer.character.gameObject.layer
    = 5;\r\n            // Change the character''s name to the userID\r\n           
    zepetoPlayer.character.name = userId;\r\n            // Send a message to the
    server every time the character state is altered. \r\n            zepetoPlayer.character.OnChangedState.AddListener((current,
    previous) => {\r\n                this.SendMessageCharacterState(current);\r\n           
    });\r\n            // Check the character transform positions every 0.1 seconds
    and update. \r\n            this.StartCoroutine(this.SendMessageCharacterTransformLoop(0.1));\r\n       
    });\r\n        // Callback when the player is fully loaded into the scene. \r\n       
    ZEPETO_Character_Controller_1.ZepetoPlayers.instance.OnAddedPlayer.AddListener((userId)
    => {\r\n            //Cache the player by userId\r\n            const zepetoPlayer
    = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.GetPlayer(userId);\r\n           
    // Set the character object''s name to the userId\r\n            zepetoPlayer.character.name
    = userId;\r\n            //Grab the player instance from the server schema map
    based on the userId\r\n            const player = this.multiplayRoom.State.players.get_Item(userId);\r\n           
    // Add to the OnChange Schema Type Callback Message\r\n            player.position.add_OnChange(()
    => {\r\n                // Only sync for everyone but the local player\r\n               
    if (zepetoPlayer.isLocalPlayer == false) {\r\n                    // Cache the
    postion values. \r\n                    const x = player.position.x;\r\n                   
    const y = player.position.y;\r\n                    const z = player.position.z;\r\n                   
    const position = new UnityEngine_1.Vector3(x, y, z);\r\n                    //
    Directly apply the server position if the position deviates past a certain range
    (Handle sync issues)\r\n                    if (UnityEngine_1.Vector3.Distance(position,
    zepetoPlayer.character.transform.position) > 7) {\r\n                       
    zepetoPlayer.character.transform.position = position;\r\n                   
    }\r\n                    // Move the character to the target position. \r\n                   
    zepetoPlayer.character.MoveToPosition(position);\r\n                    //Jump
    if the character state has changed to jump. \r\n                    if (player.characterState
    === ZEPETO_Character_Controller_1.CharacterState.JumpIdle || player.characterState
    === ZEPETO_Character_Controller_1.CharacterState.JumpMove)\r\n                       
    zepetoPlayer.character.Jump();\r\n                }\r\n            });\r\n       
    });\r\n    }\r\n    //Message Sending Functions\r\n    SendMessageCharacterState(characterState)
    {\r\n        // Create the character state message body. \r\n        const message
    = {\r\n            characterState: characterState\r\n        };\r\n        //
    Send the character state. \r\n        this.multiplayRoom.Send(MultiplayMessageType.CharacterState,
    message);\r\n    }\r\n    *SendMessageCharacterTransformLoop(tick) {\r\n       
    while (true) {\r\n            // Wait For the designated amount of time (tick)\r\n           
    yield new UnityEngine_1.WaitForSeconds(tick);\r\n            // Only run if the
    multiplay room instance exists and the room is connected. \r\n            if
    (this.multiplayRoom != null && this.multiplayRoom.IsConnected) {\r\n               
    // Cache the userId. \r\n                const userId = ZEPETO_World_1.WorldService.userId;\r\n               
    // Only run if the player exists in the zepeto players map. \r\n               
    if (ZEPETO_Character_Controller_1.ZepetoPlayers.instance.HasPlayer(userId)) {\r\n                   
    //Cache the character controller. \r\n                    const character = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.GetPlayer(userId).character;\r\n                   
    // Send the character transform update message if not idling. (Send when character
    moves/jumps)\r\n                    if (character.CurrentState != ZEPETO_Character_Controller_1.CharacterState.Idle)\r\n                       
    this.SendMessageCharacterTransform(character.transform);\r\n                }\r\n           
    }\r\n        }\r\n    }\r\n    SendMessageCharacterTransform(transform) {\r\n       
    //Cache the local transform position. \r\n        const position = transform.localPosition;\r\n       
    // Create the message body \r\n        const message = {\r\n            positionX:
    position.x,\r\n            positionY: position.y,\r\n            positionZ: position.z\r\n       
    };\r\n        // Send the message to the server. \r\n        this.multiplayRoom.Send(MultiplayMessageType.CharacterTransform,
    message);\r\n    }\r\n    SendMessageInitializeGame() {\r\n        const clientCount
    = this.multiplayPlayers.size;\r\n        let message = {\r\n            virusId:
    1,\r\n            clientCount: clientCount\r\n        };\r\n        console.log(`Initializing
    Game ${MultiplayMessageType.InitializeGame}: Virus(${message.virusId}, ${message.clientCount})`);\r\n       
    this.multiplayRoom.Send(MultiplayMessageType.InitializeGame, message);\r\n   
    }\r\n}\r\nexports.default = ClientScript;\r\nClientScript.isInitializing = true;\r\n//#
    sourceMappingURL=data:application/json;base64,","assetPath":"Assets/03_Scripts/Game
    Management/Multiplay/ClientScript.ts","manifest":{"properties":[{"assembly":"ZEPETO.World","name":"multiplay","type":"ZEPETO.World.ZepetoWorldMultiplay","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"","name":"multiplayRoom","type":"ZEPETO.Multiplay.Room","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"ZEPETO.Character.Controller","name":"objZepetoPlayers","type":"ZEPETO.Character.Controller.ZepetoPlayers","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"","name":"messageSender","type":"C:/Users/leehy/Documents/NaverZ/ZEPETO/Projects/RandDProjects/Amongus_Clone/Assets/03_Scripts/Game
    Management/Multiplay/ClientMessageSender.default","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"connectedClients","type":"System.Single","isArray":false,"initValue":["0"],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"ClientScript","description":""},"isCompiled":true}'
  typescriptHash: 3384748bc59d74e13d3013c7904fb2b4
  onlyWriteTrigger: 0
